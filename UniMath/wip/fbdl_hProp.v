Require Import UniMath.Algebra.Lattice.
Require Import UniMath.Combinatorics.StandardFiniteSets.
Require Import UniMath.Combinatorics.FiniteSets.
Require Import UniMath.Foundations.Propositions.
Require Import UniMath.MoreFoundations.Propositions.
Require Import UniMath.MoreFoundations.Subtypes.


(* A free bounded distributive lattice is a distributive lattice with 0 and 1 that is freely generated by a set. *)
(* Distributivity of two binary operations defined in UniMath.Algebra.BinaryOperations. as isrdistr/isldistr/isdistr *)
(* Subsets defined in MoreFoundations/Sets *)

(** Free bounded distributive lattice on a finite set of generators.
We define it as finite irredundant sets of finite subsets of the generators.
Join is union and then removing redundant sets.
Meet is pairwise union and then removing redundant sets.
See https://en.wikipedia.org/wiki/Distributive_lattice#Free_distributive_lattices. *)

(* 0 is the empty join. *)
(* 1 is the empty meet. *)

Open Scope stn.
Open Scope subtype.
Open Scope logic.


Section fbdl.

Declare Scope fbdl.

(* Powerset *)
Notation "'ℙ' X" := (hsubtype X) (at level 10).



(* There is a coercion "carrier" that sends A : hsubtype X to the sigma-type ∑ (x : A) A(x). *)

Definition is_fbdl_element {X : UU} (P : ℙ (ℙ X)) : hProp :=
  (isfinite P) ∧ (∀ (S : P), isfinite (pr1 S)) ∧ (∀ (T S : P), (pr1 T) ⊆ (pr1 S) ⇒ (pr1 T) ≡ (pr1 S)).

Definition fbdl_elements (X : UU) : hSet.
Proof.
  use make_hSet.
  - exact (∑ P : ℙ (ℙ X), is_fbdl_element P).
  - apply isaset_total2.
    + apply isasethsubtype.
    + intro P.
      apply isasetaprop.
      exact (pr2 (is_fbdl_element P)).
Defined.

Definition remove_redundant_sets {X : UU} (P : fbdl_elements X) : fbdl_elements X.
Proof.
  destruct P as [P [fin [subfin irred]]].
  use tpair.
  - intro S.
    exact ((((S ,, tt) : ∑ (_ : ℙ X), htrue) ∈ P) ∧ (∀ (T : P), (pr1 T) ⊆ S ⇒ (pr1 T) ≡ S)).
  - simpl.
Admitted.

Definition remove_to_is_fbdl_element {X : UU} : ∏ P : fbdl_elements X, is_fbdl_element (remove_redundant_sets (pr1 P)).
Proof.
  intro P.
  split.

Admitted.



Definition binary_union {X : UU} (P Q : ℙ X) : ℙ X.
Proof.
  use subtype_union.
  - exact bool.
  - intro x.
    induction x.
    + exact P.
    + exact Q.
Defined.

Notation "P ∪ Q" := (binary_union P Q) (at level 10).

Definition fbdl_join {X : UU} : binop (fbdl_elements X).
Proof.
  intros P Q.
  exists (remove_redundant_sets ((pr1 P) ∪ (pr1 Q))).
  apply remove_to_is_fbdl_element.
Defined.



Definition pointwise_union {X : UU} : ℙ (ℙ X) → ℙ (ℙ X) → ℙ (ℙ X).
Proof.
  intros P Q S.
  exact (∃ (T : P) (T' : Q), (S ≡ (pr1 T) ∪ (pr1 T'))).
Defined.

Definition fbdl_meet {X : UU} : binop (fbdl_elements X).
Proof.
  intros P Q.
  exists (remove_redundant_sets (pointwise_union (pr1 P) (pr1 Q))).
  apply remove_to_is_fbdl_element.
Defined.




(* Distributive lattices *)

Definition distributive_latticeop {X : hSet} (l : lattice X) := isldistr (Lmax l) (Lmin l).

Definition distributive_lattice (X : hSet) :=
  ∑ (l : lattice X), distributive_latticeop l.

Definition bounded_distributive_lattice (X : hSet) :=
  ∑ (l : lattice X) (top bot : X), (bounded_latticeop l bot top) × (distributive_latticeop l).




(* Free bounded distributive lattice on a set of generators *)

Lemma isassoc_fbdl_meet {X : hSet} : isassoc (@fbdl_meet X).
Admitted.

Lemma pointwise_union_iscomm {X : hSet} : iscomm (@pointwise_union X).
Proof.
  unfold iscomm.
  intros P Q.
  unfold pointwise_union.
  apply funextfun; intro S.
  apply hPropUnivalence.
  - intro H.
    unfold ishinh in *.
    intros prop f.
    unfold hProptoType in H.
    simpl in H.
    unfold ishinh_UU in *.
    simpl.
 Admitted.

Lemma iscomm_fbdl_meet {X : hSet} : iscomm (@fbdl_meet X).
Proof.
  intros P Q.
  use subtypePath'.
  - simpl.
    apply maponpaths.
    apply pointwise_union_iscomm.
  - exact (pr2 (is_fbdl_element (remove_redundant_sets (pointwise_union (pr1 Q) (pr1 P))))).
Defined.

Lemma isassoc_fbdl_join {X : hSet} : isassoc (@fbdl_join X).
Admitted.

Lemma iscomm_fbdl_join {X : hSet} : iscomm (@fbdl_join X).
Admitted.

Lemma fbdl_absorption_1 {X : hSet} : ∏ x y : fbdl_elements X, fbdl_meet x (fbdl_join x y) = x.
Admitted.

Lemma fbdl_absorption_2 {X : hSet} : ∏ x y : fbdl_elements X, fbdl_join x (fbdl_meet x y) = x.
Admitted.

Definition free_bounded_distributive_lattice (X : hSet) : lattice (fbdl_elements X).
Proof.
  use mklattice.
  - exact fbdl_meet.
  - exact fbdl_join.
  - repeat split.
    + apply isassoc_fbdl_meet.
    + apply iscomm_fbdl_meet.
    + apply isassoc_fbdl_join.
    + apply iscomm_fbdl_join.
    + apply fbdl_absorption_1.
    + apply fbdl_absorption_2.
Defined.
