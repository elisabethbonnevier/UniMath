Require Import UniMath.Algebra.Lattice.
Require Import UniMath.Combinatorics.StandardFiniteSets.
Require Import UniMath.Combinatorics.FiniteSets.
Require Import UniMath.Foundations.Propositions.
Require Import UniMath.MoreFoundations.Propositions.
Require Import UniMath.MoreFoundations.Subtypes.


(* Free bounded distributive lattice generated by a finite set. Thus all subsets are finite. *)
(* In the construction below, X is assumed to be finite. *)


(* A free bounded distributive lattice is a distributive lattice with 0 and 1 that is freely generated by a set. *)
(* Distributivity of two binary operations defined in UniMath.Algebra.BinaryOperations. as isrdistr/isldistr/isdistr *)
(* Subsets defined in MoreFoundations/Sets *)

(** Free bounded distributive lattice on a finite set of generators.
We define it as finite irredundant sets of finite subsets of the generators.
Join is union and then removing redundant sets.
Meet is pairwise union and then removing redundant sets.
See https://en.wikipedia.org/wiki/Distributive_lattice#Free_distributive_lattices. *)

(* 0 is the empty join. *)
(* 1 is the empty meet. *)

Open Scope stn.
Open Scope subtype.
Open Scope logic.


Section fbdl.

Declare Scope fbdl.

(* Powerset *)
Notation "'ℙ' X" := (hsubtype X) (at level 10).



(* There is a coercion "carrier" that sends A : hsubtype X to the sigma-type ∑ (x : A) A(x). *)

Definition is_fbdl_element {X : UU} (P : ℙ (ℙ X)) : hProp :=
  (∀ (T S : P), (pr1 T) ⊆ (pr1 S) ⇒ (pr1 T) ≡ (pr1 S)).

Definition fbdl_elements (X : UU) : hSet.
Proof.
  use make_hSet.
  - exact (∑ P : ℙ (ℙ X), is_fbdl_element P).
  - apply isaset_total2.
    + apply isasethsubtype.
    + intro P.
      apply isasetaprop.
      exact (pr2 (is_fbdl_element P)).
Defined.

Notation "⟨ X ⟩" := (fbdl_elements X) (at level 10).

Definition remove_redundant_sets {X : UU} (P : ⟨ X ⟩) : ⟨ X ⟩.
Proof.
  use tpair.
  - intro S.
    exact ((((S ,, tt) : ∑ (_ : ℙ X), htrue) ∈ pr1 P) ∧ (∀ (T : pr1 P), (pr1 T) ⊆ S ⇒ (pr1 T) ≡ S)).
  - simpl.
    intros S S' SsubS' x.
    split.
    + exact (SsubS' x).
    + destruct S as [S [SinP Snotredundant]].
      destruct S' as [S' [S'inP S'notredundant]].
      apply (@dirprod_pr2 (S x → S' x) _).
      generalize x.
      exact (S'notredundant (S,, SinP) SsubS').
Defined.

Definition remove_to_is_fbdl_element {X : UU} : ∏ P : ⟨ X ⟩, is_fbdl_element (pr1 (remove_redundant_sets P)).
Proof.
  intros [P isfbdlel].
  intros T S.
Admitted.
