Require Import UniMath.Algebra.Lattice.
Require Import UniMath.Combinatorics.StandardFiniteSets.
Require Import UniMath.MoreFoundations.Propositions.

(* A free bounded distributive lattice is a distributive lattice with 0 and 1 that is freely generated by a set. *)
(* Distributivity of two binary operations defined in UniMath.Algebra.BinaryOperations. as isrdistr/isldistr/isdistr *)
(* Subsets defined in MoreFoundations/Sets *)

(** Free bounded distributive lattice on a finite set of generators.
We define it as finite irredundant sets of finite subsets of the generators.
Join is union and then removing redundant sets.
Meet is pairwise union and then removing redundant sets.
See https://en.wikipedia.org/wiki/Distributive_lattice#Free_distributive_lattices. *)

(* 0 is the empty join. *)
(* 1 is the empty meet. *)

Open Scope stn.

Section fbdl.

Context {n : nat} (X := stn n).

Definition zero : stn 2 := (make_stn 2 0 (idpath _)).
Definition one : stn 2 := (make_stn 2 1 (idpath _)).

Definition powerset (Y : UU) : UU := Y → stn 2.
(* Perhaps it is easier with bool. *)
(* We have weqstn2tobool : ⟦2⟧ ≃ bool. *)

Definition PPX : UU := powerset (powerset X).

(* S is a subset of T *)
Definition isasubset {Y : UU} (S T : powerset Y) : UU :=
  ∏ y : Y, S y = one → T y = one.

Lemma subset_isdec (S T : powerset X) : (isasubset S T) ⨿ ¬(isasubset S T).
Proof.
  unfold isasubset.
Admitted.

Lemma irredundant_isdec (S : powerset X) : (∑ T : powerset X, isasubset T S) ⨿ ¬(∑ T : powerset X, isasubset T S).
Admitted.

Lemma zero_or_one (k : nat) : k < 2 → (k = 0) ⨿ (k = 1).
Admitted.

Lemma neq_zero_eq_one (x : ⟦2⟧) : (x != zero) → (x = one).
Proof.
  intro H.
  destruct x as [k p].
  case (zero_or_one k p); intro q.
Admitted.

Lemma two_isdec (x : ⟦2⟧) : (x = zero) ⨿ (x = one).
Proof.
  induction (isdeceqstn 2 x zero) as [eq_to_zero | neq_to_zero].
  - exact (inl eq_to_zero).
  - exact (inr (neq_zero_eq_one x neq_to_zero)).
Defined.

Definition isirredundant {Y : UU} (P : powerset (powerset Y)) : UU :=
  ¬ ∑ S T : powerset Y, (P S = one) × (P T = one) × (isasubset S T).

(* Only for X, not for arbitrary Y : UU, at the moment. *)
Definition remove_redundant_sets (P : PPX) : PPX.
Proof.
  intro S.
  case (two_isdec (P S)).
  - intro H.
    exact zero.
  - intro H.
    case (irredundant_isdec S).
    + intro H'.
      exact zero.
    + intro H'.
      exact one.
Defined.

Lemma max_eq {m : nat} : max m m = m.
Proof.
  induction m.
  - apply idpath.
  - simpl.
    rewrite IHm.
    apply idpath.
Defined.

Lemma max_largest {x m : nat} : (x < m) → (max x m = m).
Proof.
  generalize x m.
  induction x0.
  - simpl.
    intros.
    apply idpath.
  - induction m0.
    + simpl.
      intro H.
      case (nopathsfalsetotrue H).
    + intro H.
      simpl.
      apply maponpaths.
      exact (IHx0 m0 H).
Defined.

Lemma max_comm {x y : nat} : max x y = max y x.
Proof.
  generalize x y.
  induction x0; induction y0; repeat (apply idpath).
  - simpl.
    apply maponpaths.
    exact (IHx0 y0).
Defined.

Lemma max_lt {x y m : nat} : (x < m) → (y < m) → ((max x y) < m).
Proof.
  induction m.
  - simpl.
    exact (λ _, idfun _).
  - change (x < S m) with (x ≤ m).
    change (y < S m) with (y ≤ m).
    intros H1 H2.
    induction (natlehchoice x m H1); induction (natlehchoice y m H2).
    + apply natgthtogeh.
      apply (IHm a a0).
    + rewrite b.
      rewrite (max_largest a).
      apply natlthnsn.
    + rewrite b.
      rewrite max_comm.
      rewrite (max_largest a).
      apply natlthnsn.
    + rewrite b.
      rewrite b0.
      rewrite max_eq.
      apply natlthnsn.
Defined.

Definition union {Y : UU} (P Q : powerset Y) : powerset Y.
Proof.
  intro f.
  use make_stn.
  + exact (max (P f) (Q f)).
  + exact (max_lt (pr2 (P f)) (pr2 (Q f))).
Defined.

(* Only for X, not for arbitrary Y : UU, at the moment. *)
Definition join (P Q : PPX) : PPX := remove_redundant_sets (union P Q).

Lemma eq_to_union_isdec {P Q : PPX} (S : powerset X) : (∑ T T' : powerset X, (P T = one) × (Q T' = one) × ( S = union T T')) ⨿ ¬(∑ T T' : powerset X, (P T = one) × (Q T' = one) × (S = union T T')).
Admitted.

Definition pointwise_union (P Q : PPX) : PPX.
Proof.
  intro S.
  case (@eq_to_union_isdec P Q S).
  - intro H.
    exact one.
  - intro H.
    exact zero.
Defined.

Definition meet (P Q : PPX) : PPX := remove_redundant_sets (pointwise_union P Q).

(* Todo: define distributive lattice. *)
